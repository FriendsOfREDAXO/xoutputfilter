"typ";"active";"name";"description";"lang";"marker";"html";"allcats";"subcats";"once";"categories";"insertbefore";"excludeids";"useragent";"dataarea";"validfrom";"validto"
"4";"1";"Beispiel_01";"Wartungsarbeiten - Nicht angemeldete Benutzer auf eine Wartungsseite umleiten";"1";"<head>";"<?php\~r~\~n~/**\~r~\~n~ * Wartungsarbeiten\~r~\~n~ */\~r~\~n~\~r~\~n~// Hier die URL angeben auf die weitergeleitet werden soll!\~r~\~n~//$offline_url = rex::getServer() . 'wartungsarbeiten.html'\~d~\~r~\~n~$offline_url = rex_getUrl(13)\~d~\~r~\~n~\~r~\~n~// Weiterleitung wenn kein Backend-User angemeldet ist\~r~\~n~@session_start()\~d~\~r~\~n~$session = rex_backend_login::hasSession()\~d~\~r~\~n~\~r~\~n~if (!$session) {\~r~\~n~    if (!strstr($_SERVER[\~q~REQUEST_URI\~q~], '&maintenance')) {\~r~\~n~        if (strstr($offline_url, '?')) {\~r~\~n~            $offline_url .= '&maintenance'\~d~\~r~\~n~        } else {\~r~\~n~            $offline_url .= '?maintenance'\~d~\~r~\~n~        }\~r~\~n~        rex_response::cleanOutputBuffers()\~d~\~r~\~n~        rex_response::sendRedirect($offline_url)\~d~\~r~\~n~    }\~r~\~n~}\~r~\~n~?>";"1";"1";"0";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_01";"Wartungsarbeiten - Nicht angemeldete Benutzer auf eine Wartungsseite umleiten";"2";"<head>";"<?php\~r~\~n~/**\~r~\~n~* Wartungsarbeiten\~r~\~n~*/\~r~\~n~  global $REX\~d~\~r~\~n~\~r~\~n~  // Hier die URL angeben auf die weitergeleitet werden soll!\~r~\~n~  $offline_url = $REX['SERVER'] . 'wartungsarbeiten.html'\~d~\~r~\~n~\~r~\~n~  // evtl. Weiterleitung\~r~\~n~  @session_start()\~d~\~r~\~n~  $islogon = false\~d~\~r~\~n~  \~r~\~n~  if (isset($_SESSION[$REX['INSTNAME']]) and isset($_SESSION[$REX['INSTNAME']]['UID']) and $_SESSION[$REX['INSTNAME']]['UID']<>'')\~r~\~n~  {\~r~\~n~    $islogon = true\~d~\~r~\~n~  }\~r~\~n~\~r~\~n~  if (!$islogon) \~r~\~n~  {\~r~\~n~    if ( !strstr($_SERVER[\~q~REQUEST_URI\~q~], '&maintenance') )\~r~\~n~    {\~r~\~n~      $trash = ob_get_contents()\~d~\~r~\~n~      ob_end_clean()\~d~\~r~\~n~      if (strstr($offline_url, '?'))\~r~\~n~      {\~r~\~n~        header('Location: ' . $offline_url . '&maintenance')\~d~\~r~\~n~      }\~r~\~n~      else\~r~\~n~      {\~r~\~n~        header('Location: ' . $offline_url)\~d~\~r~\~n~      }\~r~\~n~      \~r~\~n~    }\~r~\~n~  }\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_02";"Toplink einfügen";"1";"</body>";"<!-- Toplink -->\~r~\~n~<style type=\~q~text/css\~q~>\~r~\~n~.cd-top,.cd-top:hover{color:#fff\~d~background-color:#333}.cd-top{font-size:26px\~d~line-height:40px\~d~text-align:center\~d~display:inline-block\~d~height:40px\~d~width:40px\~d~position:fixed\~d~bottom:30px\~d~right:0\~d~box-shadow:0 0 10px rgba(0,0,0,.05)\~d~overflow:hidden\~d~white-space:nowrap\~d~visibility:hidden\~d~opacity:.8\~d~border-radius:4px\~d~-webkit-transition:opacity .3s 0s,visibility 0s .3s\~d~-moz-transition:opacity .3s 0s,visibility 0s .3s\~d~transition:opacity .3s 0s,visibility 0s .3s\~d~z-index:9999999}.cd-top.cd-fade-out,.cd-top.cd-is-visible,.no-touch .cd-top:hover{-webkit-transition:opacity .3s 0s,visibility 0s 0s\~d~-moz-transition:opacity .3s 0s,visibility 0s 0s\~d~transition:opacity .3s 0s,visibility 0s 0s}.cd-top.cd-is-visible{visibility:visible\~d~opacity:.8}.cd-top.cd-fade-out{opacity:.5}.cd-top:hover{opacity:1}\~r~\~n~</style>\~r~\~n~<a href=\~q~#0\~q~ class=\~q~cd-top\~q~><i class=\~q~fa fa-arrow-up\~q~></i></a>\~r~\~n~<script>\~r~\~n~jQuery(document).ready(function(a){var b=100,c=800,d=500,e=a(\~q~.cd-top\~q~)\~d~a(window).scroll(function(){a(this).scrollTop()>b?e.addClass(\~q~cd-is-visible\~q~):e.removeClass(\~q~cd-is-visible cd-fade-out\~q~),a(this).scrollTop()>c&&e.addClass(\~q~cd-fade-out\~q~)}),e.on(\~q~click\~q~,function(b){b.preventDefault(),a(\~q~body,html\~q~).animate({scrollTop:0},d)})})\~d~\~r~\~n~</script>\~r~\~n~\~r~\~n~";"1";"1";"0";"";"1";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_02";"Toplink einfügen";"2";"</body>";"<!-- Toplink -->\~r~\~n~<style type=\~q~text/css\~q~>\~r~\~n~.cd-top {\~r~\~n~    color:#fff\~d~\~r~\~n~    font-size:26px\~d~\~r~\~n~    line-height:40px\~d~\~r~\~n~    text-align:center\~d~  \~r~\~n~    display:inline-block\~d~\~r~\~n~    height:40px\~d~\~r~\~n~    width:40px\~d~\~r~\~n~    position:fixed\~d~\~r~\~n~    bottom:30px\~d~\~r~\~n~    right:0px\~d~\~r~\~n~    box-shadow: 0 0 10px rgba(0, 0, 0, 0.05)\~d~\~r~\~n~    /* image replacement properties */\~r~\~n~    overflow:hidden\~d~\~r~\~n~    white-space:nowrap\~d~\~r~\~n~    background-color: #333\~d~\~r~\~n~    visibility:hidden\~d~\~r~\~n~    opacity: .8\~d~\~r~\~n~    border-radius:4px\~d~\~r~\~n~    -webkit-transition:opacity .3s 0s, visibility 0s .3s\~d~\~r~\~n~    -moz-transition:opacity .3s 0s, visibility 0s .3s\~d~\~r~\~n~    transition:opacity .3s 0s, visibility 0s .3s\~d~\~r~\~n~    z-index: 9999999\~d~\~r~\~n~}\~r~\~n~.cd-top.cd-is-visible, .cd-top.cd-fade-out, .no-touch .cd-top:hover {\~r~\~n~    -webkit-transition: opacity .3s 0s, visibility 0s 0s\~d~\~r~\~n~    -moz-transition: opacity .3s 0s, visibility 0s 0s\~d~\~r~\~n~    transition: opacity .3s 0s, visibility 0s 0s\~d~\~r~\~n~}\~r~\~n~.cd-top.cd-is-visible {\~r~\~n~    /* the button becomes visible */\~r~\~n~    visibility: visible\~d~\~r~\~n~    opacity: .8\~d~\~r~\~n~}\~r~\~n~.cd-top.cd-fade-out {\~r~\~n~    /* if the user keeps scrolling down, the button is out of focus and becomes less visible */\~r~\~n~    opacity: .5\~d~\~r~\~n~}\~r~\~n~.cd-top:hover {\~r~\~n~    color: #fff\~d~\~r~\~n~    background-color: #333\~d~\~r~\~n~    opacity: 1\~d~\~r~\~n~}\~r~\~n~</style>\~r~\~n~\~r~\~n~<a href=\~q~#0\~q~ class=\~q~cd-top\~q~><i class=\~q~fa fa-arrow-up\~q~></i></a>\~r~\~n~\~r~\~n~<script>\~r~\~n~jQuery(document).ready(function($){\~r~\~n~\~t~// browser window scroll (in pixels) after which the \~q~back to top\~q~ link is shown\~r~\~n~\~t~var offset = 100,\~r~\~n~\~t~\~t~//browser window scroll (in pixels) after which the \~q~back to top\~q~ link opacity is reduced\~r~\~n~\~t~\~t~offset_opacity = 800,\~r~\~n~\~t~\~t~//duration of the top scrolling animation (in ms)\~r~\~n~\~t~\~t~scroll_top_duration = 500,\~r~\~n~\~t~\~t~//grab the \~q~back to top\~q~ link\~r~\~n~\~t~\~t~$back_to_top = $('.cd-top')\~d~\~r~\~n~\~r~\~n~\~t~//hide or show the \~q~back to top\~q~ link\~r~\~n~\~t~$(window).scroll(function(){\~r~\~n~\~t~\~t~( $(this).scrollTop() > offset ) ? $back_to_top.addClass('cd-is-visible') : $back_to_top.removeClass('cd-is-visible cd-fade-out')\~d~\~r~\~n~\~t~\~t~if( $(this).scrollTop() > offset_opacity ) {\~r~\~n~\~t~\~t~\~t~$back_to_top.addClass('cd-fade-out')\~d~\~r~\~n~\~t~\~t~}\~r~\~n~\~t~})\~d~\~r~\~n~\~r~\~n~\~t~//smooth scroll to top\~r~\~n~\~t~$back_to_top.on('click', function(event){\~r~\~n~\~t~\~t~event.preventDefault()\~d~\~r~\~n~\~t~\~t~$('body,html').animate({\~r~\~n~\~t~\~t~\~t~scrollTop: 0 ,\~r~\~n~\~t~\~t~ \~t~}, scroll_top_duration\~r~\~n~\~t~\~t~)\~d~\~r~\~n~\~t~})\~d~\~r~\~n~})\~d~\~r~\~n~</script>";"1";"1";"0";"";"1";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_03";"Minify HTML";"1";"</html>";"<?php\~r~\~n~//remove redundant (white-space) characters\~r~\~n~    $replace = array(\~r~\~n~        //remove tabs before and after HTML tags\~r~\~n~        '/\>[^\S ]+/s'   => '>',\~r~\~n~        '/[^\S ]+\</s'   => '<',\~r~\~n~        //shorten multiple whitespace sequences\~d~ keep new-line characters because they matter in JS!!!\~r~\~n~        '/([\t ])+/s'  => ' ',\~r~\~n~        //remove leading and trailing spaces\~r~\~n~        '/^([\t ])+/m' => '',\~r~\~n~        '/([\t ])+$/m' => '',\~r~\~n~        // remove JS line comments (simple only)\~d~ do NOT remove lines containing URL (e.g. 'src=\~q~http://server.com/\~q~')!!!\~r~\~n~        '~//[a-zA-Z0-9 ]+$~m' => '',\~r~\~n~        //remove empty lines (sequence of line-end and white-space characters)\~r~\~n~        '/[\r\n]+([\t ]?[\r\n]+)+/s'  => \~q~\n\~q~,\~r~\~n~        //remove empty lines (between HTML tags)\~d~ cannot remove just any line-end characters because in inline JS they can matter!\~r~\~n~        '/\>[\r\n\t ]+\</s'    => '><',\~r~\~n~        //remove \~q~empty\~q~ lines containing only JS's block end character\~d~ join with next line (e.g. \~q~}\n}\n</script>\~q~ --> \~q~}}</script>\~q~\~r~\~n~        '/}[\r\n\t ]+/s'  => '}',\~r~\~n~        '/}[\r\n\t ]+,[\r\n\t ]+/s'  => '},',\~r~\~n~        //remove new-line after JS's function or condition start\~d~ join with next line\~r~\~n~        '/\)[\r\n\t ]?{[\r\n\t ]+/s'  => '){',\~r~\~n~        '/,[\r\n\t ]?{[\r\n\t ]+/s'  => ',{',\~r~\~n~        //remove new-line after JS's line end (only most obvious and safe cases)\~r~\~n~        '/\),[\r\n\t ]+/s'  => '),',\~r~\~n~        //remove quotes from HTML attributes that does not contain spaces\~d~ keep quotes around URLs!\~r~\~n~        '~([\r\n\t ])?([a-zA-Z0-9]+)=\~q~([a-zA-Z0-9_/\\-]+)\~q~([\r\n\t ])?~s' => '$1$2=$3$4', //$1 and $4 insert first white-space character found before/after attribute\~r~\~n~    )\~d~\~r~\~n~    $_SESSION['xoutputfilter']['content'] = preg_replace(array_keys($replace), array_values($replace), $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~?>";"1";"1";"0";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_03";"Minify HTML";"2";"</html>";"<?php\~r~\~n~//remove redundant (white-space) characters\~r~\~n~    $replace = array(\~r~\~n~        //remove tabs before and after HTML tags\~r~\~n~        '/\>[^\S ]+/s'   => '>',\~r~\~n~        '/[^\S ]+\</s'   => '<',\~r~\~n~        //shorten multiple whitespace sequences\~d~ keep new-line characters because they matter in JS!!!\~r~\~n~        '/([\t ])+/s'  => ' ',\~r~\~n~        //remove leading and trailing spaces\~r~\~n~        '/^([\t ])+/m' => '',\~r~\~n~        '/([\t ])+$/m' => '',\~r~\~n~        // remove JS line comments (simple only)\~d~ do NOT remove lines containing URL (e.g. 'src=\~q~http://server.com/\~q~')!!!\~r~\~n~        '~//[a-zA-Z0-9 ]+$~m' => '',\~r~\~n~        //remove empty lines (sequence of line-end and white-space characters)\~r~\~n~        '/[\r\n]+([\t ]?[\r\n]+)+/s'  => \~q~\n\~q~,\~r~\~n~        //remove empty lines (between HTML tags)\~d~ cannot remove just any line-end characters because in inline JS they can matter!\~r~\~n~        '/\>[\r\n\t ]+\</s'    => '><',\~r~\~n~        //remove \~q~empty\~q~ lines containing only JS's block end character\~d~ join with next line (e.g. \~q~}\n}\n</script>\~q~ --> \~q~}}</script>\~q~\~r~\~n~        '/}[\r\n\t ]+/s'  => '}',\~r~\~n~        '/}[\r\n\t ]+,[\r\n\t ]+/s'  => '},',\~r~\~n~        //remove new-line after JS's function or condition start\~d~ join with next line\~r~\~n~        '/\)[\r\n\t ]?{[\r\n\t ]+/s'  => '){',\~r~\~n~        '/,[\r\n\t ]?{[\r\n\t ]+/s'  => ',{',\~r~\~n~        //remove new-line after JS's line end (only most obvious and safe cases)\~r~\~n~        '/\),[\r\n\t ]+/s'  => '),',\~r~\~n~        //remove quotes from HTML attributes that does not contain spaces\~d~ keep quotes around URLs!\~r~\~n~        '~([\r\n\t ])?([a-zA-Z0-9]+)=\~q~([a-zA-Z0-9_/\\-]+)\~q~([\r\n\t ])?~s' => '$1$2=$3$4', //$1 and $4 insert first white-space character found before/after attribute\~r~\~n~    )\~d~\~r~\~n~    $_SESSION['xoutputfilter']['content'] = preg_replace(array_keys($replace), array_values($replace), $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_04";"Unverlinkte Domains verlinken";"1";"<head>";"<?php\~r~\~n~/**\~r~\~n~ * Unverlinkte Domains verlinken - http://stackoverflow.com/questions/7695110/link-unlinked-urls-bbcode-regex\~r~\~n~ */\~r~\~n~    $url_pattern = '/# Rev:20100913_0900 github.com\/jmrware\/LinkifyURL\~r~\~n~    # Match http & ftp URL that is not already linkified.\~r~\~n~      # Alternative 1: URL delimited by (parentheses).\~r~\~n~      (\()                     # $1  \~q~(\~q~ start delimiter.\~r~\~n~      ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,\~d~=:\/?#[\]@%]+)  # $2: URL.\~r~\~n~      (\))                     # $3: \~q~)\~q~ end delimiter.\~r~\~n~    | # Alternative 2: URL delimited by [square brackets].\~r~\~n~      (\[)                     # $4: \~q~[\~q~ start delimiter.\~r~\~n~      ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,\~d~=:\/?#[\]@%]+)  # $5: URL.\~r~\~n~      (\])                     # $6: \~q~]\~q~ end delimiter.\~r~\~n~    | # Alternative 3: URL delimited by {curly braces}.\~r~\~n~      (\{)                     # $7: \~q~{\~q~ start delimiter.\~r~\~n~      ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,\~d~=:\/?#[\]@%]+)  # $8: URL.\~r~\~n~      (\})                     # $9: \~q~}\~q~ end delimiter.\~r~\~n~    | # Alternative 4: URL delimited by <angle brackets>.\~r~\~n~      (<|&(?:lt|\#60|\#x3c)\~d~)  # $10: \~q~<\~q~ start delimiter (or HTML entity).\~r~\~n~      ((?:ht|f)tps?:\/\/[a-z0-9\-._~!$&\'()*+,\~d~=:\/?#[\]@%]+)  # $11: URL.\~r~\~n~      (>|&(?:gt|\#62|\#x3e)\~d~)  # $12: \~q~>\~q~ end delimiter (or HTML entity).\~r~\~n~    | # Alternative 5: URL not delimited by (), [], {} or <>.\~r~\~n~      (                        # $13: Prefix proving URL not already linked.\~r~\~n~        (?: ^                  # Can be a beginning of line or string, or\~r~\~n~        | [^=\s\'\~q~\]]          # a non-\~q~=\~q~, non-quote, non-\~q~]\~q~, followed by\~r~\~n~        ) \s*[\'\~q~]?            # optional whitespace and optional quote\~d~\~r~\~n~      | [^=\s]\s+              # or... a non-equals sign followed by whitespace.\~r~\~n~      )                        # End $13. Non-prelinkified-proof prefix.\~r~\~n~      ( \b                     # $14: Other non-delimited URL.\~r~\~n~        (?:ht|f)tps?:\/\/      # Required literal http, https, ftp or ftps prefix.\~r~\~n~        [a-z0-9\-._~!$\'()*+,\~d~=:\/?#[\]@%]+ # All URI chars except \~q~&\~q~ (normal*).\~r~\~n~        (?:                    # Either on a \~q~&\~q~ or at the end of URI.\~r~\~n~          (?!                  # Allow a \~q~&\~q~ char only if not start of an...\~r~\~n~            &(?:gt|\#0*62|\#x0*3e)\~d~                  # HTML \~q~>\~q~ entity, or\~r~\~n~          | &(?:amp|apos|quot|\#0*3[49]|\#x0*2[27])\~d~ # a [&\'\~q~] entity if\~r~\~n~            [.!&\',:?\~d~]?        # followed by optional punctuation then\~r~\~n~            (?:[^a-z0-9\-._~!$&\'()*+,\~d~=:\/?#[\]@%]|$)  # a non-URI char or EOS.\~r~\~n~          ) &                  # If neg-assertion true, match \~q~&\~q~ (special).\~r~\~n~          [a-z0-9\-._~!$\'()*+,\~d~=:\/?#[\]@%]* # More non-& URI chars (normal*).\~r~\~n~        )*                     # Unroll-the-loop (special normal*)*.\~r~\~n~        [a-z0-9\-_~$()*+=\/#[\]@%]  # Last char can\'t be [.!&\',\~d~:?]\~r~\~n~      )                        # End $14. Other non-delimited URL.\~r~\~n~    /imx'\~d~\~r~\~n~    $url_replace = '$1$4$7$10$13<a href=\~q~$2$5$8$11$14\~q~>$2$5$8$11$14</a>$3$6$9$12'\~d~\~r~\~n~    $_SESSION['xoutputfilter']['content'] = preg_replace($url_pattern, $url_replace, $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_04";"Unverlinkte Domains verlinken";"2";"<head>";"<?php\~r~\~n~/**\~r~\~n~ * Unverlinkte Domains verlinken\~r~\~n~ */\~r~\~n~global $REX\~d~\~r~\~n~\~r~\~n~  $regex = array()\~d~\~r~\~n~  $regex[] = \~q~{ \\b(?<![\\~q~>])((https?|ftp):[\\w/\\#~:.?+=&%@!\\-]+?)(?=[.:?\\-]*(?:[^\\w/\\#~:.?+=&%@!\\-]|$)) }x\~q~\~d~\~r~\~n~  $regex[] = \~q~{ (?<![\\~q~>])(>|\\s)+\\b((www)[\\w/\\#~:.?+=&%@!\\-]+?)(?=[.:?\\-]*(?:[^\\w/\\#~:.?+=&%@!\\-]|$)) }x\~q~\~d~\~r~\~n~\~r~\~n~  $replace = array()\~d~\~r~\~n~  $replace[] = \~q~<a href=\\~q~$1\\~q~>$1</a>\~q~\~d~\~r~\~n~  $replace[] = \~q~$1<a href=\\~q~http://$2\\~q~>$2</a>\~q~\~d~\~r~\~n~\~r~\~n~  $REX['xoutputfilter']['content'] = preg_replace($regex, $replace, $REX['xoutputfilter']['content'])\~d~\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_05";"Externe Links mit Klasse 'extern' versehen";"1";"href=\~q~http:\~r~\~n~|\~r~\~n~href=\~q~https:\~r~\~n~|\~r~\~n~href=\~q~ftp:\~r~\~n~|\~r~\~n~href=\~q~ftps:\~r~\~n~|\~r~\~n~href=\~q~telnet:\~r~\~n~|\~r~\~n~href=\~q~irc:";"<?php\~r~\~n~/**\~r~\~n~ * Kennzeichnung externe Links mit Ausnahmen\~r~\~n~ */\~r~\~n~\~r~\~n~  // Von der Ersetzung ausgeschlossen:\~r~\~n~  $excl = array()\~d~\~r~\~n~/*  $excl[] = 'href=\~q~' . rex::getServer()\~d~\~r~\~n~  $excl[] = 'href=\~q~http://' . rex::getServer()\~d~\~r~\~n~  $excl[] = 'href=\~q~https://' . rex::getServer()\~d~\~r~\~n~  $excl[] = '#top'\~d~\~r~\~n~  $excl[] = '#nav'\~d~\~r~\~n~  $excl[] = '#mainnav'\~d~\~r~\~n~  $excl[] = '#hauptnavigation'\~d~\~r~\~n~  $excl[] = '#content'\~d~\~r~\~n~  $excl[] = 'href=\~q~http://www.facebook.com/'\~d~\~r~\~n~  $excl[] = 'href=\~q~http://twitter.com/'\~d~*/\~r~\~n~\~r~\~n~  // hier via regEx alle absoluten, externen Linkadressen heraussuchen\~r~\~n~  preg_match_all(\~q~/<a[^>]*(href\s*=\s*(\\~q~|')(http(s)?|ftp(s)?|telnet|irc)(?=:\/\/).*?(\\~q~|'))[^>]*>(.*?)<\/a>/ims\~q~, $_SESSION['xoutputfilter']['content'], $matches)\~d~\~r~\~n~\~r~\~n~  if ( isset ($matches[0][0]) and $matches[0][0] != '')\~r~\~n~  {\~r~\~n~    $srch = $repl = array()\~d~\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[0])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $msearch = $matches[0][$m]\~d~\~r~\~n~      if (strstr($matches[0][$m], 'class='))\~r~\~n~      {\~r~\~n~        $mreplace = $matches[0][$m]\~d~\~r~\~n~      }\~r~\~n~      else\~r~\~n~      {\~r~\~n~        $mreplace = str_replace('href=', 'class=\~q~extern\~q~ href=', $matches[0][$m])\~d~\~r~\~n~      }\~r~\~n~      for ($x = 0\~d~ $x < count($excl)\~d~ $x++)\~r~\~n~      {\~r~\~n~        if (strstr($matches[1][$m], $excl[$x]))\~r~\~n~        {\~r~\~n~          $mreplace = $matches[0][$m]\~d~\~r~\~n~        }\~r~\~n~      }\~r~\~n~      $srch[] = $msearch\~d~\~r~\~n~      $repl[] = $mreplace\~d~\~r~\~n~    }\~r~\~n~    $_SESSION['xoutputfilter']['content'] = str_replace($srch, $repl, $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~  }  \~r~\~n~?>";"1";"1";"0";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_05";"Externe Links mit Klasse extern versehen";"2";"href=\~q~http:";"<?php\~r~\~n~/**\~r~\~n~ * Kennzeichnung externe Links mit Ausnahme\~r~\~n~ */\~r~\~n~global $REX\~d~\~r~\~n~\~r~\~n~  //$content = $REX['xoutputfilter']['content']\~d~\~r~\~n~\~r~\~n~  // Von der Ersetzung ausgeschlossen:\~r~\~n~  $excl = array()\~d~\~r~\~n~  $excl[] = 'href=\~q~' . $REX['SERVER']\~d~\~r~\~n~  $excl[] = 'href=\~q~http://' . $_SERVER['HTTP_HOST']\~d~\~r~\~n~  $excl[] = 'href=\~q~https://' . $_SERVER['HTTP_HOST']\~d~\~r~\~n~  $excl[] = '#top'\~d~\~r~\~n~  $excl[] = '#nav'\~d~\~r~\~n~  $excl[] = '#mainnav'\~d~\~r~\~n~  $excl[] = '#hauptnavigation'\~d~\~r~\~n~  $excl[] = '#content'\~d~\~r~\~n~  $excl[] = 'href=\~q~http://www.facebook.com/'\~d~\~r~\~n~  $excl[] = 'href=\~q~http://twitter.com/'\~d~\~r~\~n~\~r~\~n~  // hier via regEx alle absoluten, externen Linkadressen heraussuchen\~r~\~n~  preg_match_all(\~q~/<a[^>]*(href\s*=\s*(\\~q~|')(http(s)?|ftp(s)?|telnet|irc)(?=:\/\/).*?(\\~q~|'))[^>]*>(.*?)<\/a>/ims\~q~, $REX['xoutputfilter']['content'], $matches)\~d~\~r~\~n~\~r~\~n~  if ( isset ($matches[0][0]) and $matches[0][0] != '')\~r~\~n~  {\~r~\~n~    $srch = $repl = array()\~d~\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[0])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $msearch = $matches[0][$m]\~d~\~r~\~n~      if (strstr($matches[0][$m], 'class='))\~r~\~n~      {\~r~\~n~        $mreplace = $matches[0][$m]\~d~\~r~\~n~      }\~r~\~n~      else\~r~\~n~      {\~r~\~n~        $mreplace = str_replace('href=', 'class=\~q~extern\~q~ href=', $matches[0][$m])\~d~\~r~\~n~      }\~r~\~n~      for ($x = 0\~d~ $x < count($excl)\~d~ $x++)\~r~\~n~      {\~r~\~n~        if (strstr($matches[1][$m], $excl[$x]))\~r~\~n~        {\~r~\~n~          $mreplace = $matches[0][$m]\~d~\~r~\~n~        }\~r~\~n~      }\~r~\~n~      $srch[] = $msearch\~d~\~r~\~n~      $repl[] = $mreplace\~d~\~r~\~n~    }\~r~\~n~    $REX['xoutputfilter']['content'] = str_replace($srch, $repl, $REX['xoutputfilter']['content'])\~d~\~r~\~n~  }  \~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_06";"E-Mail-Adressen mit Klasse 'email' versehen und verschlüsseln";"1";"mailto:";"<?php\~r~\~n~/**\~r~\~n~ * E-Mail Adressen verschlüsseln\~r~\~n~ */\~r~\~n~\~r~\~n~  // hier via regEx alle absoluten, externen Linkadressen heraussuchen\~r~\~n~  preg_match_all(\~q~/<a[^>]*(href\s*=\s*(\\~q~|')(mailto)(?=:).*?(\\~q~|'))[^>]*>(.*?)<\/a>/ims\~q~, $_SESSION['xoutputfilter']['content'], $matches)\~d~\~r~\~n~\~r~\~n~  // hier jetzt alle gefundenen durchgehen und um klasse erweitern\~r~\~n~  if ( isset ($matches[0][0]) and $matches[0][0] != '')\~r~\~n~  {\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[0])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $msearch = $matches[0][$m]\~d~\~r~\~n~      if (strstr($matches[0][$m], 'class='))\~r~\~n~      {\~r~\~n~        $mreplace = $matches[0][$m]\~d~\~r~\~n~      }\~r~\~n~      else\~r~\~n~      {\~r~\~n~        $mreplace = str_replace('href=', 'class=\~q~email\~q~ href=', $matches[0][$m])\~d~\~r~\~n~      }\~r~\~n~      $_SESSION['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~    }\~r~\~n~  }\~r~\~n~\~r~\~n~  // hier jetzt alle gefundenen durchgehen und crypt\~r~\~n~  if ( isset ($matches[1][0]) and $matches[1][0] != '')\~r~\~n~  {\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[1])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $va = explode('mailto:', $matches[1][$m])\~d~\~r~\~n~      $originalemail = str_replace('\~q~', '', $va[1])\~d~\~r~\~n~\~r~\~n~      $encryptedemail = ''\~d~\~r~\~n~      for ($i=0\~d~ $i < strlen($originalemail)\~d~ $i++) {\~r~\~n~        $encryptedemail .= '&#'.ord(substr($originalemail, $i, 1)).'\~d~'\~d~\~r~\~n~      }\~r~\~n~\~r~\~n~      $msearch = 'mailto:'.$originalemail\~d~\~r~\~n~      $mreplace = 'mailto:'.str_replace('&#64\~d~', '%40', $encryptedemail)\~d~\~r~\~n~      $_SESSION['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~\~r~\~n~      $msearch = $originalemail\~d~\~r~\~n~      $mreplace = $encryptedemail\~d~\~r~\~n~      $_SESSION['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $_SESSION['xoutputfilter']['content'])\~d~\~r~\~n~    }\~r~\~n~  }\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"
"4";"1";"Beispiel_06";"E-Mail-Adressen mit Klasse email versehen und verschlüsseln";"2";"mailto:";"<?php\~r~\~n~/**\~r~\~n~ * E-Mail Adressen verschlüsseln\~r~\~n~ */\~r~\~n~global $REX\~d~\~r~\~n~\~r~\~n~  // hier via regEx alle absoluten, externen Linkadressen heraussuchen\~r~\~n~  preg_match_all(\~q~/<a[^>]*(href\s*=\s*(\\~q~|')(mailto)(?=:).*?(\\~q~|'))[^>]*>(.*?)<\/a>/ims\~q~, $REX['xoutputfilter']['content'], $matches)\~d~\~r~\~n~\~r~\~n~  // hier jetzt alle gefundenen durchgehen und um klasse erweitern\~r~\~n~  if ( isset ($matches[0][0]) and $matches[0][0] != '')\~r~\~n~  {\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[0])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $msearch = $matches[0][$m]\~d~\~r~\~n~      if (strstr($matches[0][$m], 'class='))\~r~\~n~      {\~r~\~n~        $mreplace = $matches[0][$m]\~d~\~r~\~n~      }\~r~\~n~      else\~r~\~n~      {\~r~\~n~        $mreplace = str_replace('href=', 'class=\~q~email\~q~ href=', $matches[0][$m])\~d~\~r~\~n~      }\~r~\~n~      $REX['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $REX['xoutputfilter']['content'])\~d~\~r~\~n~    }\~r~\~n~  }\~r~\~n~\~r~\~n~  // hier jetzt alle gefundenen durchgehen und crypt\~r~\~n~  if ( isset ($matches[1][0]) and $matches[1][0] != '')\~r~\~n~  {\~r~\~n~    for ($m = 0\~d~ $m < count ($matches[1])\~d~ $m++)\~r~\~n~    {\~r~\~n~      $va = explode('mailto:', $matches[1][$m])\~d~\~r~\~n~      $originalemail = str_replace('\~q~', '', $va[1])\~d~\~r~\~n~\~r~\~n~      $encryptedemail = ''\~d~\~r~\~n~      for ($i=0\~d~ $i < strlen($originalemail)\~d~ $i++) {\~r~\~n~        $encryptedemail .= '&#'.ord(substr($originalemail, $i, 1)).'\~d~'\~d~\~r~\~n~      }\~r~\~n~\~r~\~n~      $msearch = 'mailto:'.$originalemail\~d~\~r~\~n~      $mreplace = 'mailto:'.str_replace('&#64\~d~', '%40', $encryptedemail)\~d~\~r~\~n~      $REX['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $REX['xoutputfilter']['content'])\~d~\~r~\~n~\~r~\~n~      $msearch = $originalemail\~d~\~r~\~n~      $mreplace = $encryptedemail\~d~\~r~\~n~      $REX['xoutputfilter']['content'] = str_replace($msearch, $mreplace, $REX['xoutputfilter']['content'])\~d~\~r~\~n~    }\~r~\~n~  }\~r~\~n~?>";"1";"1";"1";"";"4";"";"";"";"0000-00-00 00:00:00";"0000-00-00 00:00:00"